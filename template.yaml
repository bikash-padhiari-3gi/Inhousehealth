AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation template to create two sets of SQS queues and Lambda functions with logging enabled.

Resources:
  # First SQS Queue
  FirstQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: FirstQueue

  # First CloudWatch Logs Group
  FirstLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/FirstLambdaFunction
      RetentionInDays: 7

  # First Lambda Function
  # Developed for checking AI mis-use
  FirstLambdaFunction:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: FirstLambdaFunction
      Handler: ai-mis-use-lambda.handler
      Role: !GetAtt FirstLambdaExecutionRole.Arn
      CodeUri: ./ai-misuse-lambda/
      Runtime: python3.12
      Timeout: 30
      Environment: 
        Variables:
          FIRST_QUEUE_URL: !Ref FirstQueue
          SECOND_QUEUE_URL: !Ref SecondQueue

  # First Lambda Execution Role
  FirstLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FirstLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FirstLambdaSQSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:SendMessage
                Resource: 
                  - !GetAtt FirstQueue.Arn
                  - !GetAtt SecondQueue.Arn
        - PolicyName: FirstLambdaLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: FirstLambdaBedrockPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:ListFoundationModels
                  - bedrock:InvokeModel
                  - bedrock:InvokeAgent
                Resource: "*"              

  # First Lambda SQS Event Source Mapping
  FirstLambdaSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: True
      EventSourceArn: !GetAtt FirstQueue.Arn
      FunctionName: !Ref FirstLambdaFunction

  # Second SQS Queue
  SecondQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: SecondQueue

  # Second CloudWatch Logs Group
  SecondLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/SecondLambdaFunction
      RetentionInDays: 7

  # Second Lambda Function
  # Developed to send the prompt to bedrock once the AI mis-use check is done
  SecondLambdaFunction:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: SecondLambdaFunction
      Handler: bedrock-prompt-lambda.handler
      Role: !GetAtt SecondLambdaExecutionRole.Arn
      CodeUri: ./bedrock-lambda/
      Runtime: python3.12
      Timeout: 30
      Environment: 
        Variables:
          QUEUE_URL: !Ref SecondQueue

  # Second Lambda Execution Role
  SecondLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SecondLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SecondLambdaSQSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt SecondQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/SecondLambdaFunction:*
      
        - PolicyName: SecondLambdaLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: SecondLambdaBedrockPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:ListFoundationModels
                  - bedrock:InvokeModel
                  - bedrock:InvokeAgent
                Resource: "*"              

  # Second Lambda SQS Event Source Mapping
  SecondLambdaSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: True
      EventSourceArn: !GetAtt SecondQueue.Arn
      FunctionName: !Ref SecondLambdaFunction

Outputs:
  FirstQueueURL:
    Description: The URL of the first SQS queue
    Value: !Ref FirstQueue

  SecondQueueURL:
    Description: The URL of the second SQS queue
    Value: !Ref SecondQueue

  FirstLambdaFunctionARN:
    Description: The ARN of the first Lambda function
    Value: !GetAtt FirstLambdaFunction.Arn

  SecondLambdaFunctionARN:
    Description: The ARN of the second Lambda function
    Value: !GetAtt SecondLambdaFunction.Arn
